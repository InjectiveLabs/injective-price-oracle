// Code generated by goa v3.7.0, DO NOT EDIT.
//
// PriceOracle gRPC client CLI support package
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-price-oracle/api/design -o ../

package cli

import (
	"flag"
	"fmt"
	"os"

	healthc "github.com/InjectiveLabs/injective-price-oracle/api/gen/grpc/health/client"
	goa "goa.design/goa/v3/pkg"
	grpc "google.golang.org/grpc"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `health get-status
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` health get-status` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(cc *grpc.ClientConn, opts ...grpc.CallOption) (goa.Endpoint, interface{}, error) {
	var (
		healthFlags = flag.NewFlagSet("health", flag.ContinueOnError)

		healthGetStatusFlags = flag.NewFlagSet("get-status", flag.ExitOnError)
	)
	healthFlags.Usage = healthUsage
	healthGetStatusFlags.Usage = healthGetStatusUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "health":
			svcf = healthFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "health":
			switch epn {
			case "get-status":
				epf = healthGetStatusFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "health":
			c := healthc.NewClient(cc, opts...)
			switch epn {
			case "get-status":
				endpoint = c.GetStatus()
				data = nil
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// healthUsage displays the usage of the health command and its subcommands.
func healthUsage() {
	fmt.Fprintf(os.Stderr, `HealthAPI allows to check if backend data is up-to-date and reliable or not.
Usage:
    %[1]s [globalflags] health COMMAND [flags]

COMMAND:
    get-status: Get current backend health status

Additional help:
    %[1]s health COMMAND --help
`, os.Args[0])
}
func healthGetStatusUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] health get-status

Get current backend health status

Example:
    %[1]s health get-status
`, os.Args[0])
}
