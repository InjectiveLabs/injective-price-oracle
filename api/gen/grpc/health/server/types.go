// Code generated by goa v3.7.0, DO NOT EDIT.
//
// health gRPC server types
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-price-oracle/api/design -o ../

package server

import (
	healthpb "github.com/InjectiveLabs/injective-price-oracle/api/gen/grpc/health/pb"
	health "github.com/InjectiveLabs/injective-price-oracle/api/gen/health"
)

// NewProtoGetStatusResponse builds the gRPC response type from the result of
// the "GetStatus" endpoint of the "health" service.
func NewProtoGetStatusResponse(result *health.HealthStatusResponse) *healthpb.GetStatusResponse {
	message := &healthpb.GetStatusResponse{
		S:      result.S,
		Status: result.Status,
	}
	if result.Errmsg != nil {
		message.Errmsg = *result.Errmsg
	}
	if result.Data != nil {
		message.Data = svcHealthHealthStatusToHealthpbHealthStatus(result.Data)
	}
	return message
}

// svcHealthHealthStatusToHealthpbHealthStatus builds a value of type
// *healthpb.HealthStatus from a value of type *health.HealthStatus.
func svcHealthHealthStatusToHealthpbHealthStatus(v *health.HealthStatus) *healthpb.HealthStatus {
	if v == nil {
		return nil
	}
	res := &healthpb.HealthStatus{}

	return res
}

// protobufHealthpbHealthStatusToHealthHealthStatus builds a value of type
// *health.HealthStatus from a value of type *healthpb.HealthStatus.
func protobufHealthpbHealthStatusToHealthHealthStatus(v *healthpb.HealthStatus) *health.HealthStatus {
	if v == nil {
		return nil
	}
	res := &health.HealthStatus{}

	return res
}
