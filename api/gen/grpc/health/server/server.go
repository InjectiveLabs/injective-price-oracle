// Code generated by goa v3.7.0, DO NOT EDIT.
//
// health gRPC server
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-price-oracle/api/design -o ../

package server

import (
	"context"
	"errors"

	healthpb "github.com/InjectiveLabs/injective-price-oracle/api/gen/grpc/health/pb"
	health "github.com/InjectiveLabs/injective-price-oracle/api/gen/health"
	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc/codes"
)

// Server implements the healthpb.HealthServer interface.
type Server struct {
	GetStatusH goagrpc.UnaryHandler
	healthpb.UnimplementedHealthServer
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the expr.
type ErrorNamer interface {
	ErrorName() string
}

// New instantiates the server struct with the health service endpoints.
func New(e *health.Endpoints, uh goagrpc.UnaryHandler) *Server {
	return &Server{
		GetStatusH: NewGetStatusHandler(e.GetStatus, uh),
	}
}

// NewGetStatusHandler creates a gRPC handler which serves the "health" service
// "GetStatus" endpoint.
func NewGetStatusHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, nil, EncodeGetStatusResponse)
	}
	return h
}

// GetStatus implements the "GetStatus" method in healthpb.HealthServer
// interface.
func (s *Server) GetStatus(ctx context.Context, message *healthpb.GetStatusRequest) (*healthpb.GetStatusResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "GetStatus")
	ctx = context.WithValue(ctx, goa.ServiceKey, "health")
	resp, err := s.GetStatusH.Handle(ctx, message)
	if err != nil {
		var en ErrorNamer
		if errors.As(err, &en) {
			switch en.ErrorName() {
			case "internal":
				return nil, goagrpc.NewStatusError(codes.Internal, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*healthpb.GetStatusResponse), nil
}
