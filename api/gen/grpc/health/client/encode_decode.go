// Code generated by goa v3.7.0, DO NOT EDIT.
//
// health gRPC client encoders and decoders
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-price-oracle/api/design -o ../

package client

import (
	"context"

	healthpb "github.com/InjectiveLabs/injective-price-oracle/api/gen/grpc/health/pb"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildGetStatusFunc builds the remote method to invoke for "health" service
// "GetStatus" endpoint.
func BuildGetStatusFunc(grpccli healthpb.HealthClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.GetStatus(ctx, reqpb.(*healthpb.GetStatusRequest), opts...)
		}
		return grpccli.GetStatus(ctx, &healthpb.GetStatusRequest{}, opts...)
	}
}

// DecodeGetStatusResponse decodes responses from the health GetStatus endpoint.
func DecodeGetStatusResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*healthpb.GetStatusResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("health", "GetStatus", "*healthpb.GetStatusResponse", v)
	}
	if err := ValidateGetStatusResponse(message); err != nil {
		return nil, err
	}
	res := NewGetStatusResult(message)
	return res, nil
}
