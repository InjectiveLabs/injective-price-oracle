// Code generated by goa v3.7.0, DO NOT EDIT.
//
// health gRPC client types
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-price-oracle/api/design -o ../

package client

import (
	healthpb "github.com/InjectiveLabs/injective-price-oracle/api/gen/grpc/health/pb"
	health "github.com/InjectiveLabs/injective-price-oracle/api/gen/health"
	goa "goa.design/goa/v3/pkg"
)

// NewProtoGetStatusRequest builds the gRPC request type from the payload of
// the "GetStatus" endpoint of the "health" service.
func NewProtoGetStatusRequest() *healthpb.GetStatusRequest {
	message := &healthpb.GetStatusRequest{}
	return message
}

// NewGetStatusResult builds the result type of the "GetStatus" endpoint of the
// "health" service from the gRPC response type.
func NewGetStatusResult(message *healthpb.GetStatusResponse) *health.HealthStatusResponse {
	result := &health.HealthStatusResponse{
		S:      message.S,
		Status: message.Status,
	}
	if message.Errmsg != "" {
		result.Errmsg = &message.Errmsg
	}
	if message.Data != nil {
		result.Data = protobufHealthpbHealthStatusToHealthHealthStatus(message.Data)
	}
	return result
}

// ValidateGetStatusResponse runs the validations defined on GetStatusResponse.
func ValidateGetStatusResponse(message *healthpb.GetStatusResponse) (err error) {
	if !(message.S == "ok" || message.S == "error" || message.S == "no_data") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.s", message.S, []interface{}{"ok", "error", "no_data"}))
	}
	return
}

// ValidateHealthStatus runs the validations defined on HealthStatus.
func ValidateHealthStatus(message *healthpb.HealthStatus) (err error) {

	return
}

// svcHealthHealthStatusToHealthpbHealthStatus builds a value of type
// *healthpb.HealthStatus from a value of type *health.HealthStatus.
func svcHealthHealthStatusToHealthpbHealthStatus(v *health.HealthStatus) *healthpb.HealthStatus {
	if v == nil {
		return nil
	}
	res := &healthpb.HealthStatus{}

	return res
}

// protobufHealthpbHealthStatusToHealthHealthStatus builds a value of type
// *health.HealthStatus from a value of type *healthpb.HealthStatus.
func protobufHealthpbHealthStatusToHealthHealthStatus(v *healthpb.HealthStatus) *health.HealthStatus {
	if v == nil {
		return nil
	}
	res := &health.HealthStatus{}

	return res
}
