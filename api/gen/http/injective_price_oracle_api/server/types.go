// Code generated by goa v3.7.0, DO NOT EDIT.
//
// Injective Price Oracle API HTTP server types
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-price-oracle/api/design -o ../

package server

import (
	injectivepriceoracleapi "github.com/InjectiveLabs/injective-price-oracle/api/gen/injective_price_oracle_api"
	goa "goa.design/goa/v3/pkg"
)

// ProbeRequestBody is the type of the "Injective Price Oracle API" service
// "probe" endpoint HTTP request body.
type ProbeRequestBody struct {
	// TOML file contents
	Content []byte `form:"content,omitempty" json:"content,omitempty" xml:"content,omitempty"`
}

// ProbeResponseBody is the type of the "Injective Price Oracle API" service
// "probe" endpoint HTTP response body.
type ProbeResponseBody struct {
	// Result of the probe
	Result string `form:"result" json:"result" xml:"result"`
}

// ProbeInvalidArgResponseBody is the type of the "Injective Price Oracle API"
// service "probe" endpoint HTTP response body for the "invalid_arg" error.
type ProbeInvalidArgResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ProbeInternalResponseBody is the type of the "Injective Price Oracle API"
// service "probe" endpoint HTTP response body for the "internal" error.
type ProbeInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ProbeUnauthorizedResponseBody is the type of the "Injective Price Oracle
// API" service "probe" endpoint HTTP response body for the "unauthorized"
// error.
type ProbeUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// NewProbeResponseBody builds the HTTP response body from the result of the
// "probe" endpoint of the "Injective Price Oracle API" service.
func NewProbeResponseBody(res *injectivepriceoracleapi.ProbeResponse) *ProbeResponseBody {
	body := &ProbeResponseBody{
		Result: res.Result,
	}
	return body
}

// NewProbeInvalidArgResponseBody builds the HTTP response body from the result
// of the "probe" endpoint of the "Injective Price Oracle API" service.
func NewProbeInvalidArgResponseBody(res *goa.ServiceError) *ProbeInvalidArgResponseBody {
	body := &ProbeInvalidArgResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewProbeInternalResponseBody builds the HTTP response body from the result
// of the "probe" endpoint of the "Injective Price Oracle API" service.
func NewProbeInternalResponseBody(res *goa.ServiceError) *ProbeInternalResponseBody {
	body := &ProbeInternalResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewProbeUnauthorizedResponseBody builds the HTTP response body from the
// result of the "probe" endpoint of the "Injective Price Oracle API" service.
func NewProbeUnauthorizedResponseBody(res *goa.ServiceError) *ProbeUnauthorizedResponseBody {
	body := &ProbeUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewProbePayload builds a Injective Price Oracle API service probe endpoint
// payload.
func NewProbePayload(body *ProbeRequestBody, key *string) *injectivepriceoracleapi.ProbePayload {
	v := &injectivepriceoracleapi.ProbePayload{
		Content: body.Content,
	}
	v.Key = key

	return v
}

// ValidateProbeRequestBody runs the validations defined on ProbeRequestBody
func ValidateProbeRequestBody(body *ProbeRequestBody) (err error) {
	if body.Content == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("content", "body"))
	}
	return
}
