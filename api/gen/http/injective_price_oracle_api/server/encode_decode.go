// Code generated by goa v3.7.0, DO NOT EDIT.
//
// Injective Price Oracle API HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-price-oracle/api/design -o ../

package server

import (
	"context"
	"errors"
	"net/http"
	"strings"

	injectivepriceoracleapi "github.com/InjectiveLabs/injective-price-oracle/api/gen/injective_price_oracle_api"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeProbeResponse returns an encoder for responses returned by the
// Injective Price Oracle API probe endpoint.
func EncodeProbeResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*injectivepriceoracleapi.ProbeResponse)
		enc := encoder(ctx, w)
		body := NewProbeResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeProbeRequest returns a decoder for requests sent to the Injective
// Price Oracle API probe endpoint.
func DecodeProbeRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var payload *injectivepriceoracleapi.ProbePayload
		if err := decoder(r).Decode(&payload); err != nil {
			return nil, goa.DecodePayloadError(err.Error())
		}
		if payload.Key != nil {
			if strings.Contains(*payload.Key, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Key, " ", 2)[1]
				payload.Key = &cred
			}
		}

		return payload, nil
	}
}

// NewInjectivePriceOracleAPIProbeDecoder returns a decoder to decode the
// multipart request for the "Injective Price Oracle API" service "probe"
// endpoint.
func NewInjectivePriceOracleAPIProbeDecoder(mux goahttp.Muxer, injectivePriceOracleAPIProbeDecoderFn InjectivePriceOracleAPIProbeDecoderFunc) func(r *http.Request) goahttp.Decoder {
	return func(r *http.Request) goahttp.Decoder {
		return goahttp.EncodingFunc(func(v interface{}) error {
			mr, merr := r.MultipartReader()
			if merr != nil {
				return merr
			}
			p := v.(**injectivepriceoracleapi.ProbePayload)
			if err := injectivePriceOracleAPIProbeDecoderFn(mr, p); err != nil {
				return err
			}

			var (
				key *string
			)
			keyRaw := r.Header.Get("X-Api-Key")
			if keyRaw != "" {
				key = &keyRaw
			}
			(*p).Key = key
			return nil
		})
	}
}

// EncodeProbeError returns an encoder for errors returned by the probe
// Injective Price Oracle API endpoint.
func EncodeProbeError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en ErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "invalid_arg":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewProbeInvalidArgResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "internal":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewProbeInternalResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "unauthorized":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewProbeUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}
