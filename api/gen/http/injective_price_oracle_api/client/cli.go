// Code generated by goa v3.7.0, DO NOT EDIT.
//
// Injective Price Oracle API HTTP client CLI support package
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-price-oracle/api/design -o ../

package client

import (
	"encoding/json"
	"fmt"

	injectivepriceoracleapi "github.com/InjectiveLabs/injective-price-oracle/api/gen/injective_price_oracle_api"
	goa "goa.design/goa/v3/pkg"
)

// BuildProbePayload builds the payload for the Injective Price Oracle API
// probe endpoint from CLI flags.
func BuildProbePayload(injectivePriceOracleAPIProbeBody string) (*injectivepriceoracleapi.ProbePayload, error) {
	var err error
	var body ProbeRequestBody
	{
		err = json.Unmarshal([]byte(injectivePriceOracleAPIProbeBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"content\": \"Q29uc2VxdWF0dXIgZWEgdm9sdXB0YXRlbSBpbi4=\"\n   }'")
		}
		if body.Content == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("content", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &injectivepriceoracleapi.ProbePayload{
		Content: body.Content,
	}

	return v, nil
}
