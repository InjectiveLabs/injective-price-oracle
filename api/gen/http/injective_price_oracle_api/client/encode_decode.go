// Code generated by goa v3.7.0, DO NOT EDIT.
//
// Injective Price Oracle API HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-price-oracle/api/design -o ../

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"mime/multipart"
	"net/http"
	"net/url"

	injectivepriceoracleapi "github.com/InjectiveLabs/injective-price-oracle/api/gen/injective_price_oracle_api"
	goahttp "goa.design/goa/v3/http"
)

// BuildProbeRequest instantiates a HTTP request object with method and path
// set to call the "Injective Price Oracle API" service "probe" endpoint
func (c *Client) BuildProbeRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ProbeInjectivePriceOracleAPIPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Injective Price Oracle API", "probe", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeProbeRequest returns an encoder for requests sent to the Injective
// Price Oracle API probe server.
func EncodeProbeRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*injectivepriceoracleapi.ProbePayload)
		if !ok {
			return goahttp.ErrInvalidType("Injective Price Oracle API", "probe", "*injectivepriceoracleapi.ProbePayload", v)
		}
		if err := encoder(req).Encode(p); err != nil {
			return goahttp.ErrEncodingError("Injective Price Oracle API", "probe", err)
		}
		return nil
	}
}

// NewInjectivePriceOracleAPIProbeEncoder returns an encoder to encode the
// multipart request for the "Injective Price Oracle API" service "probe"
// endpoint.
func NewInjectivePriceOracleAPIProbeEncoder(encoderFn InjectivePriceOracleAPIProbeEncoderFunc) func(r *http.Request) goahttp.Encoder {
	return func(r *http.Request) goahttp.Encoder {
		body := &bytes.Buffer{}
		mw := multipart.NewWriter(body)
		return goahttp.EncodingFunc(func(v interface{}) error {
			p := v.(*injectivepriceoracleapi.ProbePayload)
			if err := encoderFn(mw, p); err != nil {
				return err
			}
			r.Body = ioutil.NopCloser(body)
			r.Header.Set("Content-Type", mw.FormDataContentType())
			return mw.Close()
		})
	}
}

// DecodeProbeResponse returns a decoder for responses returned by the
// Injective Price Oracle API probe endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeProbeResponse may return the following errors:
//   - "invalid_arg" (type *goa.ServiceError): http.StatusBadRequest
//   - "internal" (type *goa.ServiceError): http.StatusInternalServerError
//   - error: internal error
func DecodeProbeResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ProbeResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Injective Price Oracle API", "probe", err)
			}
			err = ValidateProbeResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Injective Price Oracle API", "probe", err)
			}
			res := NewProbeResponseOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body ProbeInvalidArgResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Injective Price Oracle API", "probe", err)
			}
			err = ValidateProbeInvalidArgResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Injective Price Oracle API", "probe", err)
			}
			return nil, NewProbeInvalidArg(&body)
		case http.StatusInternalServerError:
			var (
				body ProbeInternalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Injective Price Oracle API", "probe", err)
			}
			err = ValidateProbeInternalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Injective Price Oracle API", "probe", err)
			}
			return nil, NewProbeInternal(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Injective Price Oracle API", "probe", resp.StatusCode, string(body))
		}
	}
}
