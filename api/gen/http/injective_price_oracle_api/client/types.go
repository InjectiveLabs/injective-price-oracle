// Code generated by goa v3.7.0, DO NOT EDIT.
//
// Injective Price Oracle API HTTP client types
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-price-oracle/api/design -o ../

package client

import (
	injectivepriceoracleapi "github.com/InjectiveLabs/injective-price-oracle/api/gen/injective_price_oracle_api"
	goa "goa.design/goa/v3/pkg"
)

// ProbeRequestBody is the type of the "Injective Price Oracle API" service
// "probe" endpoint HTTP request body.
type ProbeRequestBody struct {
	// TOML file contents
	Content []byte `form:"content" json:"content" xml:"content"`
}

// ProbeResponseBody is the type of the "Injective Price Oracle API" service
// "probe" endpoint HTTP response body.
type ProbeResponseBody struct {
	// Result of the probe
	Result *string `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
}

// ProbeInvalidArgResponseBody is the type of the "Injective Price Oracle API"
// service "probe" endpoint HTTP response body for the "invalid_arg" error.
type ProbeInvalidArgResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ProbeInternalResponseBody is the type of the "Injective Price Oracle API"
// service "probe" endpoint HTTP response body for the "internal" error.
type ProbeInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ProbeUnauthorizedResponseBody is the type of the "Injective Price Oracle
// API" service "probe" endpoint HTTP response body for the "unauthorized"
// error.
type ProbeUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// NewProbeRequestBody builds the HTTP request body from the payload of the
// "probe" endpoint of the "Injective Price Oracle API" service.
func NewProbeRequestBody(p *injectivepriceoracleapi.ProbePayload) *ProbeRequestBody {
	body := &ProbeRequestBody{
		Content: p.Content,
	}
	return body
}

// NewProbeResponseOK builds a "Injective Price Oracle API" service "probe"
// endpoint result from a HTTP "OK" response.
func NewProbeResponseOK(body *ProbeResponseBody) *injectivepriceoracleapi.ProbeResponse {
	v := &injectivepriceoracleapi.ProbeResponse{
		Result: *body.Result,
	}

	return v
}

// NewProbeInvalidArg builds a Injective Price Oracle API service probe
// endpoint invalid_arg error.
func NewProbeInvalidArg(body *ProbeInvalidArgResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewProbeInternal builds a Injective Price Oracle API service probe endpoint
// internal error.
func NewProbeInternal(body *ProbeInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewProbeUnauthorized builds a Injective Price Oracle API service probe
// endpoint unauthorized error.
func NewProbeUnauthorized(body *ProbeUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateProbeResponseBody runs the validations defined on ProbeResponseBody
func ValidateProbeResponseBody(body *ProbeResponseBody) (err error) {
	if body.Result == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("result", "body"))
	}
	return
}

// ValidateProbeInvalidArgResponseBody runs the validations defined on
// probe_invalid_arg_response_body
func ValidateProbeInvalidArgResponseBody(body *ProbeInvalidArgResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateProbeInternalResponseBody runs the validations defined on
// probe_internal_response_body
func ValidateProbeInternalResponseBody(body *ProbeInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateProbeUnauthorizedResponseBody runs the validations defined on
// probe_unauthorized_response_body
func ValidateProbeUnauthorizedResponseBody(body *ProbeUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}
