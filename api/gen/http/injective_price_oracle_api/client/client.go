// Code generated by goa v3.7.0, DO NOT EDIT.
//
// Injective Price Oracle API client HTTP transport
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-price-oracle/api/design -o ../

package client

import (
	"context"
	"mime/multipart"
	"net/http"

	injectivepriceoracleapi "github.com/InjectiveLabs/injective-price-oracle/api/gen/injective_price_oracle_api"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the Injective Price Oracle API service endpoint HTTP clients.
type Client struct {
	// Probe Doer is the HTTP client used to make requests to the probe endpoint.
	ProbeDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// InjectivePriceOracleAPIProbeEncoderFunc is the type to encode multipart
// request for the "Injective Price Oracle API" service "probe" endpoint.
type InjectivePriceOracleAPIProbeEncoderFunc func(*multipart.Writer, *injectivepriceoracleapi.ProbePayload) error

// NewClient instantiates HTTP clients for all the Injective Price Oracle API
// service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		ProbeDoer:           doer,
		CORSDoer:            doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// Probe returns an endpoint that makes HTTP requests to the Injective Price
// Oracle API service probe server.
func (c *Client) Probe(injectivePriceOracleAPIProbeEncoderFn InjectivePriceOracleAPIProbeEncoderFunc) goa.Endpoint {
	var (
		encodeRequest  = EncodeProbeRequest(NewInjectivePriceOracleAPIProbeEncoder(injectivePriceOracleAPIProbeEncoderFn))
		decodeResponse = DecodeProbeResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildProbeRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ProbeDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Injective Price Oracle API", "probe", err)
		}
		return decodeResponse(resp)
	}
}
