// Code generated by goa v3.7.0, DO NOT EDIT.
//
// health HTTP server types
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-price-oracle/api/design -o ../

package server

import (
	health "github.com/InjectiveLabs/injective-price-oracle/api/gen/health"
	goa "goa.design/goa/v3/pkg"
)

// GetStatusResponseBody is the type of the "health" service "GetStatus"
// endpoint HTTP response body.
type GetStatusResponseBody struct {
	// Status of the response.
	S string `form:"s" json:"s" xml:"s"`
	// Error message.
	Errmsg *string                   `form:"errmsg,omitempty" json:"errmsg,omitempty" xml:"errmsg,omitempty"`
	Data   *HealthStatusResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	Status string                    `form:"status" json:"status" xml:"status"`
}

// GetStatusInternalResponseBody is the type of the "health" service
// "GetStatus" endpoint HTTP response body for the "internal" error.
type GetStatusInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// HealthStatusResponseBody is used to define fields on response body types.
type HealthStatusResponseBody struct {
}

// NewGetStatusResponseBody builds the HTTP response body from the result of
// the "GetStatus" endpoint of the "health" service.
func NewGetStatusResponseBody(res *health.HealthStatusResponse) *GetStatusResponseBody {
	body := &GetStatusResponseBody{
		S:      res.S,
		Errmsg: res.Errmsg,
		Status: res.Status,
	}
	if res.Data != nil {
		body.Data = marshalHealthHealthStatusToHealthStatusResponseBody(res.Data)
	}
	return body
}

// NewGetStatusInternalResponseBody builds the HTTP response body from the
// result of the "GetStatus" endpoint of the "health" service.
func NewGetStatusInternalResponseBody(res *goa.ServiceError) *GetStatusInternalResponseBody {
	body := &GetStatusInternalResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}
