// Code generated by goa v3.7.0, DO NOT EDIT.
//
// health HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-price-oracle/api/design -o ../

package server

import (
	"context"
	"errors"
	"net/http"

	health "github.com/InjectiveLabs/injective-price-oracle/api/gen/health"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeGetStatusResponse returns an encoder for responses returned by the
// health GetStatus endpoint.
func EncodeGetStatusResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*health.HealthStatusResponse)
		enc := encoder(ctx, w)
		body := NewGetStatusResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeGetStatusError returns an encoder for errors returned by the GetStatus
// health endpoint.
func EncodeGetStatusError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en ErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "internal":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetStatusInternalResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalHealthHealthStatusToHealthStatusResponseBody builds a value of type
// *HealthStatusResponseBody from a value of type *health.HealthStatus.
func marshalHealthHealthStatusToHealthStatusResponseBody(v *health.HealthStatus) *HealthStatusResponseBody {
	if v == nil {
		return nil
	}
	res := &HealthStatusResponseBody{}

	return res
}
