// Code generated by goa v3.7.0, DO NOT EDIT.
//
// health HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-price-oracle/api/design -o ../

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	health "github.com/InjectiveLabs/injective-price-oracle/api/gen/health"
	goahttp "goa.design/goa/v3/http"
)

// BuildGetStatusRequest instantiates a HTTP request object with method and
// path set to call the "health" service "GetStatus" endpoint
func (c *Client) BuildGetStatusRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetStatusHealthPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("health", "GetStatus", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetStatusResponse returns a decoder for responses returned by the
// health GetStatus endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeGetStatusResponse may return the following errors:
//   - "internal" (type *goa.ServiceError): http.StatusInternalServerError
//   - error: internal error
func DecodeGetStatusResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetStatusResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("health", "GetStatus", err)
			}
			err = ValidateGetStatusResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("health", "GetStatus", err)
			}
			res := NewGetStatusHealthStatusResponseOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body GetStatusInternalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("health", "GetStatus", err)
			}
			err = ValidateGetStatusInternalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("health", "GetStatus", err)
			}
			return nil, NewGetStatusInternal(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("health", "GetStatus", resp.StatusCode, string(body))
		}
	}
}

// unmarshalHealthStatusResponseBodyToHealthHealthStatus builds a value of type
// *health.HealthStatus from a value of type *HealthStatusResponseBody.
func unmarshalHealthStatusResponseBodyToHealthHealthStatus(v *HealthStatusResponseBody) *health.HealthStatus {
	if v == nil {
		return nil
	}
	res := &health.HealthStatus{}

	return res
}
