// Code generated by goa v3.7.0, DO NOT EDIT.
//
// health HTTP client types
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-price-oracle/api/design -o ../

package client

import (
	health "github.com/InjectiveLabs/injective-price-oracle/api/gen/health"
	goa "goa.design/goa/v3/pkg"
)

// GetStatusResponseBody is the type of the "health" service "GetStatus"
// endpoint HTTP response body.
type GetStatusResponseBody struct {
	// Status of the response.
	S *string `form:"s,omitempty" json:"s,omitempty" xml:"s,omitempty"`
	// Error message.
	Errmsg *string                   `form:"errmsg,omitempty" json:"errmsg,omitempty" xml:"errmsg,omitempty"`
	Data   *HealthStatusResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	Status *string                   `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// GetStatusInternalResponseBody is the type of the "health" service
// "GetStatus" endpoint HTTP response body for the "internal" error.
type GetStatusInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// HealthStatusResponseBody is used to define fields on response body types.
type HealthStatusResponseBody struct {
}

// NewGetStatusHealthStatusResponseOK builds a "health" service "GetStatus"
// endpoint result from a HTTP "OK" response.
func NewGetStatusHealthStatusResponseOK(body *GetStatusResponseBody) *health.HealthStatusResponse {
	v := &health.HealthStatusResponse{
		S:      *body.S,
		Errmsg: body.Errmsg,
		Status: *body.Status,
	}
	if body.Data != nil {
		v.Data = unmarshalHealthStatusResponseBodyToHealthHealthStatus(body.Data)
	}

	return v
}

// NewGetStatusInternal builds a health service GetStatus endpoint internal
// error.
func NewGetStatusInternal(body *GetStatusInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateGetStatusResponseBody runs the validations defined on
// GetStatusResponseBody
func ValidateGetStatusResponseBody(body *GetStatusResponseBody) (err error) {
	if body.S == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("s", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.S != nil {
		if !(*body.S == "ok" || *body.S == "error" || *body.S == "no_data") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.s", *body.S, []interface{}{"ok", "error", "no_data"}))
		}
	}
	return
}

// ValidateGetStatusInternalResponseBody runs the validations defined on
// GetStatus_internal_Response_Body
func ValidateGetStatusInternalResponseBody(body *GetStatusInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}
