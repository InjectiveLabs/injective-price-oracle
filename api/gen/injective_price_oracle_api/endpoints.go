// Code generated by goa v3.7.0, DO NOT EDIT.
//
// Injective Price Oracle API endpoints
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-price-oracle/api/design -o ../

package injectivepriceoracleapi

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "Injective Price Oracle API" service endpoints.
type Endpoints struct {
	Probe goa.Endpoint
}

// NewEndpoints wraps the methods of the "Injective Price Oracle API" service
// with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Probe: NewProbeEndpoint(s),
	}
}

// Use applies the given middleware to all the "Injective Price Oracle API"
// service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Probe = m(e.Probe)
}

// NewProbeEndpoint returns an endpoint function that calls the method "probe"
// of service "Injective Price Oracle API".
func NewProbeEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ProbePayload)
		return s.Probe(ctx, p)
	}
}
