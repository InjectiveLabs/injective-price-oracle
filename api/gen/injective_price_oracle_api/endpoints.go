// Code generated by goa v3.7.0, DO NOT EDIT.
//
// Injective Price Oracle API endpoints
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-price-oracle/api/design -o ../

package injectivepriceoracleapi

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "Injective Price Oracle API" service endpoints.
type Endpoints struct {
	Probe goa.Endpoint
}

// NewEndpoints wraps the methods of the "Injective Price Oracle API" service
// with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		Probe: NewProbeEndpoint(s, a.APIKeyAuth),
	}
}

// Use applies the given middleware to all the "Injective Price Oracle API"
// service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Probe = m(e.Probe)
}

// NewProbeEndpoint returns an endpoint function that calls the method "probe"
// of service "Injective Price Oracle API".
func NewProbeEndpoint(s Service, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ProbePayload)
		var err error
		sc := security.APIKeyScheme{
			Name:           "api_key",
			Scopes:         []string{"api:read"},
			RequiredScopes: []string{},
		}
		var key string
		if p.Key != nil {
			key = *p.Key
		}
		ctx, err = authAPIKeyFn(ctx, key, &sc)
		if err != nil {
			return nil, err
		}
		return s.Probe(ctx, p)
	}
}
