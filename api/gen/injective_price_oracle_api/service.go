// Code generated by goa v3.7.0, DO NOT EDIT.
//
// Injective Price Oracle API service
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-price-oracle/api/design -o ../

package injectivepriceoracleapi

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Injective-Price-Oracle services API doc
type Service interface {
	// Validate TOML file
	Probe(context.Context, *ProbePayload) (res *ProbeResponse, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// APIKeyAuth implements the authorization logic for the APIKey security scheme.
	APIKeyAuth(ctx context.Context, key string, schema *security.APIKeyScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "Injective Price Oracle API"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"probe"}

// ProbePayload is the payload type of the Injective Price Oracle API service
// probe method.
type ProbePayload struct {
	// API key for authentication
	Key *string
	// TOML file contents
	Content []byte
}

// ProbeResponse is the result type of the Injective Price Oracle API service
// probe method.
type ProbeResponse struct {
	// Result of the probe
	Result string
}

// MakeInvalidArg builds a goa.ServiceError from an error.
func MakeInvalidArg(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "invalid_arg",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "not_found",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeInternal builds a goa.ServiceError from an error.
func MakeInternal(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "internal",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "unauthorized",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}
