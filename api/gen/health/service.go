// Code generated by goa v3.7.0, DO NOT EDIT.
//
// health service
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-price-oracle/api/design -o ../

package health

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// HealthAPI allows to check if backend data is up-to-date and reliable or not.
type Service interface {
	// Get current backend health status
	GetStatus(context.Context) (res *HealthStatusResponse, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "health"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"GetStatus"}

// Status defines the structure for health information
type HealthStatus struct {
}

// HealthStatusResponse is the result type of the health service GetStatus
// method.
type HealthStatusResponse struct {
	// Status of the response.
	S string
	// Error message.
	Errmsg *string
	Data   *HealthStatus
	Status string
}

// MakeInternal builds a goa.ServiceError from an error.
func MakeInternal(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "internal",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}
